/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface BlockRewardInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DECIMALS"
      | "isInitialized"
      | "getRewardedOnCycle"
      | "shouldEmitRewardedOnCycle"
      | "getBlockRewardAmount"
      | "getBlockRewardAmountPerValidator"
      | "INFLATION"
      | "getBlocksPerYear"
      | "onCycleEnd"
      | "getTotalSupply"
      | "BLOCKS_PER_YEAR"
      | "emitRewardedOnCycle"
      | "getInflation"
      | "getProxyStorage"
      | "reward"
      | "initialize"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Rewarded" | "RewardedOnCycle"
  ): EventFragment;

  encodeFunctionData(functionFragment: "DECIMALS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardedOnCycle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "shouldEmitRewardedOnCycle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockRewardAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockRewardAmountPerValidator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "INFLATION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBlocksPerYear",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onCycleEnd",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BLOCKS_PER_YEAR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emitRewardedOnCycle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInflation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProxyStorage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reward",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "DECIMALS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardedOnCycle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shouldEmitRewardedOnCycle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockRewardAmountPerValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "INFLATION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBlocksPerYear",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "onCycleEnd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BLOCKS_PER_YEAR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitRewardedOnCycle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInflation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProxyStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
}

export namespace RewardedEvent {
  export type InputTuple = [receivers: AddressLike[], rewards: BigNumberish[]];
  export type OutputTuple = [receivers: string[], rewards: bigint[]];
  export interface OutputObject {
    receivers: string[];
    rewards: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardedOnCycleEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BlockReward extends BaseContract {
  connect(runner?: ContractRunner | null): BlockReward;
  waitForDeployment(): Promise<this>;

  interface: BlockRewardInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DECIMALS: TypedContractMethod<[], [bigint], "view">;

  isInitialized: TypedContractMethod<[], [boolean], "view">;

  getRewardedOnCycle: TypedContractMethod<[], [bigint], "view">;

  shouldEmitRewardedOnCycle: TypedContractMethod<[], [boolean], "view">;

  getBlockRewardAmount: TypedContractMethod<[], [bigint], "view">;

  getBlockRewardAmountPerValidator: TypedContractMethod<
    [_validator: AddressLike],
    [bigint],
    "view"
  >;

  INFLATION: TypedContractMethod<[], [bigint], "view">;

  getBlocksPerYear: TypedContractMethod<[], [bigint], "view">;

  onCycleEnd: TypedContractMethod<[], [void], "nonpayable">;

  getTotalSupply: TypedContractMethod<[], [bigint], "view">;

  BLOCKS_PER_YEAR: TypedContractMethod<[], [bigint], "view">;

  emitRewardedOnCycle: TypedContractMethod<[], [void], "nonpayable">;

  getInflation: TypedContractMethod<[], [bigint], "view">;

  getProxyStorage: TypedContractMethod<[], [string], "view">;

  reward: TypedContractMethod<
    [benefactors: AddressLike[], kind: BigNumberish[]],
    [[string[], bigint[]]],
    "nonpayable"
  >;

  initialize: TypedContractMethod<
    [_supply: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DECIMALS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isInitialized"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getRewardedOnCycle"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "shouldEmitRewardedOnCycle"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getBlockRewardAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBlockRewardAmountPerValidator"
  ): TypedContractMethod<[_validator: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "INFLATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBlocksPerYear"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "onCycleEnd"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getTotalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BLOCKS_PER_YEAR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "emitRewardedOnCycle"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getInflation"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getProxyStorage"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "reward"
  ): TypedContractMethod<
    [benefactors: AddressLike[], kind: BigNumberish[]],
    [[string[], bigint[]]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[_supply: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "Rewarded"
  ): TypedContractEvent<
    RewardedEvent.InputTuple,
    RewardedEvent.OutputTuple,
    RewardedEvent.OutputObject
  >;
  getEvent(
    key: "RewardedOnCycle"
  ): TypedContractEvent<
    RewardedOnCycleEvent.InputTuple,
    RewardedOnCycleEvent.OutputTuple,
    RewardedOnCycleEvent.OutputObject
  >;

  filters: {
    "Rewarded(address[],uint256[])": TypedContractEvent<
      RewardedEvent.InputTuple,
      RewardedEvent.OutputTuple,
      RewardedEvent.OutputObject
    >;
    Rewarded: TypedContractEvent<
      RewardedEvent.InputTuple,
      RewardedEvent.OutputTuple,
      RewardedEvent.OutputObject
    >;

    "RewardedOnCycle(uint256)": TypedContractEvent<
      RewardedOnCycleEvent.InputTuple,
      RewardedOnCycleEvent.OutputTuple,
      RewardedOnCycleEvent.OutputObject
    >;
    RewardedOnCycle: TypedContractEvent<
      RewardedOnCycleEvent.InputTuple,
      RewardedOnCycleEvent.OutputTuple,
      RewardedOnCycleEvent.OutputObject
    >;
  };
}
