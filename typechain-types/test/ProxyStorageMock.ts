/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ProxyStorageMockInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getConsensus"
      | "getVoting"
      | "initializeAddresses"
      | "isValidContractType"
      | "isInitialized"
      | "upgradeConsensusMock"
      | "upgradeBlockRewardMock"
      | "setConsensusMock"
      | "setContractAddress"
      | "initialize"
      | "setBlockRewardMock"
      | "getBlockReward"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ProxyInitialized" | "AddressSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getConsensus",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getVoting", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initializeAddresses",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidContractType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeConsensusMock",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeBlockRewardMock",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setConsensusMock",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractAddress",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setBlockRewardMock",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockReward",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getConsensus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVoting", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidContractType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeConsensusMock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeBlockRewardMock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setConsensusMock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBlockRewardMock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockReward",
    data: BytesLike
  ): Result;
}

export namespace ProxyInitializedEvent {
  export type InputTuple = [
    consensus: AddressLike,
    blockReward: AddressLike,
    voting: AddressLike
  ];
  export type OutputTuple = [
    consensus: string,
    blockReward: string,
    voting: string
  ];
  export interface OutputObject {
    consensus: string;
    blockReward: string;
    voting: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AddressSetEvent {
  export type InputTuple = [
    contractType: BigNumberish,
    contractAddress: AddressLike
  ];
  export type OutputTuple = [contractType: bigint, contractAddress: string];
  export interface OutputObject {
    contractType: bigint;
    contractAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ProxyStorageMock extends BaseContract {
  connect(runner?: ContractRunner | null): ProxyStorageMock;
  waitForDeployment(): Promise<this>;

  interface: ProxyStorageMockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getConsensus: TypedContractMethod<[], [string], "view">;

  getVoting: TypedContractMethod<[], [string], "view">;

  initializeAddresses: TypedContractMethod<
    [_blockReward: AddressLike, _voting: AddressLike],
    [void],
    "nonpayable"
  >;

  isValidContractType: TypedContractMethod<
    [_contractType: BigNumberish],
    [boolean],
    "view"
  >;

  isInitialized: TypedContractMethod<[], [boolean], "view">;

  upgradeConsensusMock: TypedContractMethod<
    [_implementation: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeBlockRewardMock: TypedContractMethod<
    [_implementation: AddressLike],
    [void],
    "nonpayable"
  >;

  setConsensusMock: TypedContractMethod<
    [_newAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setContractAddress: TypedContractMethod<
    [_contractType: BigNumberish, _contractAddress: AddressLike],
    [boolean],
    "nonpayable"
  >;

  initialize: TypedContractMethod<
    [_consensus: AddressLike],
    [void],
    "nonpayable"
  >;

  setBlockRewardMock: TypedContractMethod<
    [_newAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getBlockReward: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getConsensus"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getVoting"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initializeAddresses"
  ): TypedContractMethod<
    [_blockReward: AddressLike, _voting: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isValidContractType"
  ): TypedContractMethod<[_contractType: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "isInitialized"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "upgradeConsensusMock"
  ): TypedContractMethod<[_implementation: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeBlockRewardMock"
  ): TypedContractMethod<[_implementation: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setConsensusMock"
  ): TypedContractMethod<[_newAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setContractAddress"
  ): TypedContractMethod<
    [_contractType: BigNumberish, _contractAddress: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[_consensus: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBlockRewardMock"
  ): TypedContractMethod<[_newAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getBlockReward"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "ProxyInitialized"
  ): TypedContractEvent<
    ProxyInitializedEvent.InputTuple,
    ProxyInitializedEvent.OutputTuple,
    ProxyInitializedEvent.OutputObject
  >;
  getEvent(
    key: "AddressSet"
  ): TypedContractEvent<
    AddressSetEvent.InputTuple,
    AddressSetEvent.OutputTuple,
    AddressSetEvent.OutputObject
  >;

  filters: {
    "ProxyInitialized(address,address,address)": TypedContractEvent<
      ProxyInitializedEvent.InputTuple,
      ProxyInitializedEvent.OutputTuple,
      ProxyInitializedEvent.OutputObject
    >;
    ProxyInitialized: TypedContractEvent<
      ProxyInitializedEvent.InputTuple,
      ProxyInitializedEvent.OutputTuple,
      ProxyInitializedEvent.OutputObject
    >;

    "AddressSet(uint256,address)": TypedContractEvent<
      AddressSetEvent.InputTuple,
      AddressSetEvent.OutputTuple,
      AddressSetEvent.OutputObject
    >;
    AddressSet: TypedContractEvent<
      AddressSetEvent.InputTuple,
      AddressSetEvent.OutputTuple,
      AddressSetEvent.OutputObject
    >;
  };
}
