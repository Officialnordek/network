/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  EternalStorage,
  EternalStorageInterface,
} from "../../eternal-storage/EternalStorage";

const _abi = [
  {
    constant: true,
    inputs: [],
    name: "isInitialized",
    outputs: [
      {
        name: "",
        type: "bool",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610152806100206000396000f3006080604052600436106100405763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663392e53cd8114610045575b600080fd5b34801561005157600080fd5b5061005a61006e565b604080519115158252519081900360200190f35b60006006600060405160200180807f6973496e697469616c697a656400000000000000000000000000000000000000815250600d0190506040516020818303038152906040526040518082805190602001908083835b602083106100e35780518252601f1990920191602091820191016100c4565b51815160209384036101000a600019018019909216911617905260408051929094018290039091208652850195909552929092016000205460ff169493505050505600a165627a7a72305820f7faf51f1da847ba935188c45f59e93a615024636bd6c6f60dd7bf7a38d336680029";

type EternalStorageConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EternalStorageConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class EternalStorage__factory extends ContractFactory {
  constructor(...args: EternalStorageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      EternalStorage & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): EternalStorage__factory {
    return super.connect(runner) as EternalStorage__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EternalStorageInterface {
    return new Interface(_abi) as EternalStorageInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): EternalStorage {
    return new Contract(address, _abi, runner) as unknown as EternalStorage;
  }
}
