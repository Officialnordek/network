/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "BlockRewardBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BlockRewardBase__factory>;
    getContractFactory(
      name: "ValidatorSet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ValidatorSet__factory>;
    getContractFactory(
      name: "VotingBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VotingBase__factory>;
    getContractFactory(
      name: "BlockReward",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BlockReward__factory>;
    getContractFactory(
      name: "Consensus",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Consensus__factory>;
    getContractFactory(
      name: "ConsensusUtils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConsensusUtils__factory>;
    getContractFactory(
      name: "EternalStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EternalStorage__factory>;
    getContractFactory(
      name: "EternalStorageProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EternalStorageProxy__factory>;
    getContractFactory(
      name: "IBlockReward",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBlockReward__factory>;
    getContractFactory(
      name: "IConsensus",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IConsensus__factory>;
    getContractFactory(
      name: "IVoting",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVoting__factory>;
    getContractFactory(
      name: "Migrations",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Migrations__factory>;
    getContractFactory(
      name: "MultiSigWallet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultiSigWallet__factory>;
    getContractFactory(
      name: "OwnershipDataEncoder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnershipDataEncoder__factory>;
    getContractFactory(
      name: "ProxyStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProxyStorage__factory>;
    getContractFactory(
      name: "BlockRewardMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BlockRewardMock__factory>;
    getContractFactory(
      name: "ConsensusMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConsensusMock__factory>;
    getContractFactory(
      name: "EternalStorageProxyMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EternalStorageProxyMock__factory>;
    getContractFactory(
      name: "ProxyStorageMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProxyStorageMock__factory>;
    getContractFactory(
      name: "VotingMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VotingMock__factory>;
    getContractFactory(
      name: "Voting",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Voting__factory>;
    getContractFactory(
      name: "VotingUtils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VotingUtils__factory>;

    getContractAt(
      name: "BlockRewardBase",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BlockRewardBase>;
    getContractAt(
      name: "ValidatorSet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ValidatorSet>;
    getContractAt(
      name: "VotingBase",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.VotingBase>;
    getContractAt(
      name: "BlockReward",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BlockReward>;
    getContractAt(
      name: "Consensus",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Consensus>;
    getContractAt(
      name: "ConsensusUtils",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ConsensusUtils>;
    getContractAt(
      name: "EternalStorage",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EternalStorage>;
    getContractAt(
      name: "EternalStorageProxy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EternalStorageProxy>;
    getContractAt(
      name: "IBlockReward",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBlockReward>;
    getContractAt(
      name: "IConsensus",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IConsensus>;
    getContractAt(
      name: "IVoting",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IVoting>;
    getContractAt(
      name: "Migrations",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Migrations>;
    getContractAt(
      name: "MultiSigWallet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MultiSigWallet>;
    getContractAt(
      name: "OwnershipDataEncoder",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnershipDataEncoder>;
    getContractAt(
      name: "ProxyStorage",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ProxyStorage>;
    getContractAt(
      name: "BlockRewardMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BlockRewardMock>;
    getContractAt(
      name: "ConsensusMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ConsensusMock>;
    getContractAt(
      name: "EternalStorageProxyMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EternalStorageProxyMock>;
    getContractAt(
      name: "ProxyStorageMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ProxyStorageMock>;
    getContractAt(
      name: "VotingMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.VotingMock>;
    getContractAt(
      name: "Voting",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Voting>;
    getContractAt(
      name: "VotingUtils",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.VotingUtils>;

    deployContract(
      name: "BlockRewardBase",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BlockRewardBase>;
    deployContract(
      name: "ValidatorSet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ValidatorSet>;
    deployContract(
      name: "VotingBase",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VotingBase>;
    deployContract(
      name: "BlockReward",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BlockReward>;
    deployContract(
      name: "Consensus",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Consensus>;
    deployContract(
      name: "ConsensusUtils",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ConsensusUtils>;
    deployContract(
      name: "EternalStorage",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EternalStorage>;
    deployContract(
      name: "EternalStorageProxy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EternalStorageProxy>;
    deployContract(
      name: "IBlockReward",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBlockReward>;
    deployContract(
      name: "IConsensus",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IConsensus>;
    deployContract(
      name: "IVoting",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVoting>;
    deployContract(
      name: "Migrations",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Migrations>;
    deployContract(
      name: "MultiSigWallet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MultiSigWallet>;
    deployContract(
      name: "OwnershipDataEncoder",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OwnershipDataEncoder>;
    deployContract(
      name: "ProxyStorage",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ProxyStorage>;
    deployContract(
      name: "BlockRewardMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BlockRewardMock>;
    deployContract(
      name: "ConsensusMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ConsensusMock>;
    deployContract(
      name: "EternalStorageProxyMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EternalStorageProxyMock>;
    deployContract(
      name: "ProxyStorageMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ProxyStorageMock>;
    deployContract(
      name: "VotingMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VotingMock>;
    deployContract(
      name: "Voting",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Voting>;
    deployContract(
      name: "VotingUtils",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VotingUtils>;

    deployContract(
      name: "BlockRewardBase",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BlockRewardBase>;
    deployContract(
      name: "ValidatorSet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ValidatorSet>;
    deployContract(
      name: "VotingBase",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VotingBase>;
    deployContract(
      name: "BlockReward",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BlockReward>;
    deployContract(
      name: "Consensus",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Consensus>;
    deployContract(
      name: "ConsensusUtils",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ConsensusUtils>;
    deployContract(
      name: "EternalStorage",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EternalStorage>;
    deployContract(
      name: "EternalStorageProxy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EternalStorageProxy>;
    deployContract(
      name: "IBlockReward",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBlockReward>;
    deployContract(
      name: "IConsensus",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IConsensus>;
    deployContract(
      name: "IVoting",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVoting>;
    deployContract(
      name: "Migrations",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Migrations>;
    deployContract(
      name: "MultiSigWallet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MultiSigWallet>;
    deployContract(
      name: "OwnershipDataEncoder",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OwnershipDataEncoder>;
    deployContract(
      name: "ProxyStorage",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ProxyStorage>;
    deployContract(
      name: "BlockRewardMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BlockRewardMock>;
    deployContract(
      name: "ConsensusMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ConsensusMock>;
    deployContract(
      name: "EternalStorageProxyMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EternalStorageProxyMock>;
    deployContract(
      name: "ProxyStorageMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ProxyStorageMock>;
    deployContract(
      name: "VotingMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VotingMock>;
    deployContract(
      name: "Voting",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Voting>;
    deployContract(
      name: "VotingUtils",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VotingUtils>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
