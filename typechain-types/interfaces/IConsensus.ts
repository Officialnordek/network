/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface IConsensusInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "currentValidatorsLength"
      | "currentValidatorsAtPosition"
      | "getDelegatorsForRewardDistribution"
      | "cycle"
      | "isFinalized"
      | "totalStakeAmount"
      | "getCycleDurationBlocks"
      | "getCurrentCycleEndBlock"
      | "stakeAmount"
      | "isValidator"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "currentValidatorsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentValidatorsAtPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegatorsForRewardDistribution",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "cycle", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "isFinalized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStakeAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCycleDurationBlocks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentCycleEndBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakeAmount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidator",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "currentValidatorsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentValidatorsAtPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegatorsForRewardDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cycle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isFinalized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStakeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCycleDurationBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentCycleEndBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidator",
    data: BytesLike
  ): Result;
}

export interface IConsensus extends BaseContract {
  connect(runner?: ContractRunner | null): IConsensus;
  waitForDeployment(): Promise<this>;

  interface: IConsensusInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  currentValidatorsLength: TypedContractMethod<[], [bigint], "view">;

  currentValidatorsAtPosition: TypedContractMethod<
    [_p: BigNumberish],
    [string],
    "view"
  >;

  getDelegatorsForRewardDistribution: TypedContractMethod<
    [_validator: AddressLike, _rewardAmount: BigNumberish],
    [[string[], bigint[]]],
    "view"
  >;

  cycle: TypedContractMethod<[_validator: AddressLike], [void], "nonpayable">;

  isFinalized: TypedContractMethod<[], [boolean], "view">;

  totalStakeAmount: TypedContractMethod<[], [bigint], "view">;

  getCycleDurationBlocks: TypedContractMethod<[], [bigint], "view">;

  getCurrentCycleEndBlock: TypedContractMethod<[], [bigint], "view">;

  stakeAmount: TypedContractMethod<[_address: AddressLike], [bigint], "view">;

  isValidator: TypedContractMethod<[_address: AddressLike], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "currentValidatorsLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "currentValidatorsAtPosition"
  ): TypedContractMethod<[_p: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getDelegatorsForRewardDistribution"
  ): TypedContractMethod<
    [_validator: AddressLike, _rewardAmount: BigNumberish],
    [[string[], bigint[]]],
    "view"
  >;
  getFunction(
    nameOrSignature: "cycle"
  ): TypedContractMethod<[_validator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isFinalized"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "totalStakeAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCycleDurationBlocks"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentCycleEndBlock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "stakeAmount"
  ): TypedContractMethod<[_address: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "isValidator"
  ): TypedContractMethod<[_address: AddressLike], [boolean], "view">;

  filters: {};
}
