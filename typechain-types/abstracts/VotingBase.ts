/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface VotingBaseInterface extends Interface {
  getFunction(nameOrSignature: "vote"): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "BallotCreated" | "BallotFinalized" | "Vote"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
}

export namespace BallotCreatedEvent {
  export type InputTuple = [id: BigNumberish, creator: AddressLike];
  export type OutputTuple = [id: bigint, creator: string];
  export interface OutputObject {
    id: bigint;
    creator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BallotFinalizedEvent {
  export type InputTuple = [id: BigNumberish];
  export type OutputTuple = [id: bigint];
  export interface OutputObject {
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteEvent {
  export type InputTuple = [
    id: BigNumberish,
    decision: BigNumberish,
    voter: AddressLike
  ];
  export type OutputTuple = [id: bigint, decision: bigint, voter: string];
  export interface OutputObject {
    id: bigint;
    decision: bigint;
    voter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VotingBase extends BaseContract {
  connect(runner?: ContractRunner | null): VotingBase;
  waitForDeployment(): Promise<this>;

  interface: VotingBaseInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  vote: TypedContractMethod<
    [_id: BigNumberish, _choice: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<
    [_id: BigNumberish, _choice: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "BallotCreated"
  ): TypedContractEvent<
    BallotCreatedEvent.InputTuple,
    BallotCreatedEvent.OutputTuple,
    BallotCreatedEvent.OutputObject
  >;
  getEvent(
    key: "BallotFinalized"
  ): TypedContractEvent<
    BallotFinalizedEvent.InputTuple,
    BallotFinalizedEvent.OutputTuple,
    BallotFinalizedEvent.OutputObject
  >;
  getEvent(
    key: "Vote"
  ): TypedContractEvent<
    VoteEvent.InputTuple,
    VoteEvent.OutputTuple,
    VoteEvent.OutputObject
  >;

  filters: {
    "BallotCreated(uint256,address)": TypedContractEvent<
      BallotCreatedEvent.InputTuple,
      BallotCreatedEvent.OutputTuple,
      BallotCreatedEvent.OutputObject
    >;
    BallotCreated: TypedContractEvent<
      BallotCreatedEvent.InputTuple,
      BallotCreatedEvent.OutputTuple,
      BallotCreatedEvent.OutputObject
    >;

    "BallotFinalized(uint256)": TypedContractEvent<
      BallotFinalizedEvent.InputTuple,
      BallotFinalizedEvent.OutputTuple,
      BallotFinalizedEvent.OutputObject
    >;
    BallotFinalized: TypedContractEvent<
      BallotFinalizedEvent.InputTuple,
      BallotFinalizedEvent.OutputTuple,
      BallotFinalizedEvent.OutputObject
    >;

    "Vote(uint256,uint256,address)": TypedContractEvent<
      VoteEvent.InputTuple,
      VoteEvent.OutputTuple,
      VoteEvent.OutputObject
    >;
    Vote: TypedContractEvent<
      VoteEvent.InputTuple,
      VoteEvent.OutputTuple,
      VoteEvent.OutputObject
    >;
  };
}
