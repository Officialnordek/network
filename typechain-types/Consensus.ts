/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ConsensusInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "jailedValidatorsLength"
      | "pendingValidatorsAtPosition"
      | "getSnapshotAddresses"
      | "setProxyStorage"
      | "getMinValidatorFee"
      | "isJailed"
      | "setPaused"
      | "delegatedAmount"
      | "pendingValidatorsLength"
      | "newValidatorSetLength"
      | "DECIMALS"
      | "withdraw(uint256)"
      | "withdraw(address,uint256)"
      | "isInitialized"
      | "stake"
      | "currentValidatorsLength"
      | "setValidatorFee"
      | "getMinStake"
      | "currentValidatorsAtPosition"
      | "delegate"
      | "paused"
      | "newValidatorSet"
      | "jailedValidators"
      | "getDelegatorsForRewardDistribution"
      | "STRIKE_RESET"
      | "maintenance"
      | "unJail"
      | "MAX_VALIDATORS"
      | "VALIDATOR_PRODUCTIVITY_BP"
      | "finalizeChange"
      | "getMaxValidators"
      | "getStrikes"
      | "blockCounter"
      | "CYCLE_DURATION_BLOCKS"
      | "cycle"
      | "MAX_STRIKE_COUNT"
      | "requiredSignatures"
      | "delegators"
      | "isFinalized"
      | "jailedValidatorsAtPosition"
      | "DEFAULT_VALIDATOR_FEE"
      | "getCurrentCycleStartBlock"
      | "emitInitiateChange"
      | "totalStakeAmount"
      | "validatorFee"
      | "isDelegator"
      | "currentValidators"
      | "getCycleDurationBlocks"
      | "pendingValidators"
      | "getCurrentCycleEndBlock"
      | "getValidators"
      | "stakeAmount"
      | "initialize"
      | "MAX_STAKE"
      | "MIN_STAKE"
      | "getStrikeReset"
      | "delegatorsLength"
      | "delegatorsAtPosition"
      | "getProxyStorage"
      | "getReleaseBlock"
      | "shouldEmitInitiateChange"
      | "isValidator"
      | "isPendingValidator"
      | "getMaxStake"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ChangeFinalized"
      | "ShouldEmitInitiateChange"
      | "InitiateChange"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "jailedValidatorsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingValidatorsAtPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSnapshotAddresses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProxyStorage",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinValidatorFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isJailed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "setPaused", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "delegatedAmount",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingValidatorsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "newValidatorSetLength",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "DECIMALS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stake", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "currentValidatorsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setValidatorFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentValidatorsAtPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delegate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "newValidatorSet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "jailedValidators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegatorsForRewardDistribution",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "STRIKE_RESET",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maintenance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unJail", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_VALIDATORS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VALIDATOR_PRODUCTIVITY_BP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeChange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxValidators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStrikes",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "blockCounter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "CYCLE_DURATION_BLOCKS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "cycle", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "MAX_STRIKE_COUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requiredSignatures",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "delegators",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isFinalized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "jailedValidatorsAtPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_VALIDATOR_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentCycleStartBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emitInitiateChange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStakeAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "validatorFee",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isDelegator",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "currentValidators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCycleDurationBlocks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingValidators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentCycleEndBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getValidators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakeAmount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "MAX_STAKE", values?: undefined): string;
  encodeFunctionData(functionFragment: "MIN_STAKE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getStrikeReset",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "delegatorsLength",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "delegatorsAtPosition",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProxyStorage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReleaseBlock",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "shouldEmitInitiateChange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isValidator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isPendingValidator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxStake",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "jailedValidatorsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingValidatorsAtPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSnapshotAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProxyStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinValidatorFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isJailed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegatedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingValidatorsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newValidatorSetLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "DECIMALS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdraw(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdraw(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentValidatorsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setValidatorFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentValidatorsAtPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "newValidatorSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "jailedValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegatorsForRewardDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STRIKE_RESET",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maintenance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unJail", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_VALIDATORS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VALIDATOR_PRODUCTIVITY_BP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getStrikes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blockCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CYCLE_DURATION_BLOCKS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cycle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_STRIKE_COUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiredSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegators", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isFinalized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "jailedValidatorsAtPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_VALIDATOR_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentCycleStartBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitInitiateChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStakeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDelegator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCycleDurationBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentCycleEndBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MAX_STAKE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MIN_STAKE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStrikeReset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegatorsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegatorsAtPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProxyStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReleaseBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shouldEmitInitiateChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPendingValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxStake",
    data: BytesLike
  ): Result;
}

export namespace ChangeFinalizedEvent {
  export type InputTuple = [newSet: AddressLike[]];
  export type OutputTuple = [newSet: string[]];
  export interface OutputObject {
    newSet: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ShouldEmitInitiateChangeEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitiateChangeEvent {
  export type InputTuple = [parentHash: BytesLike, newSet: AddressLike[]];
  export type OutputTuple = [parentHash: string, newSet: string[]];
  export interface OutputObject {
    parentHash: string;
    newSet: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Consensus extends BaseContract {
  connect(runner?: ContractRunner | null): Consensus;
  waitForDeployment(): Promise<this>;

  interface: ConsensusInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  jailedValidatorsLength: TypedContractMethod<[], [bigint], "view">;

  pendingValidatorsAtPosition: TypedContractMethod<
    [_p: BigNumberish],
    [string],
    "view"
  >;

  getSnapshotAddresses: TypedContractMethod<
    [_snapshotId: BigNumberish],
    [string[]],
    "view"
  >;

  setProxyStorage: TypedContractMethod<
    [_newAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getMinValidatorFee: TypedContractMethod<[], [bigint], "view">;

  isJailed: TypedContractMethod<[_address: AddressLike], [boolean], "view">;

  setPaused: TypedContractMethod<[_paused: boolean], [void], "nonpayable">;

  delegatedAmount: TypedContractMethod<
    [_address: AddressLike, _validator: AddressLike],
    [bigint],
    "view"
  >;

  pendingValidatorsLength: TypedContractMethod<[], [bigint], "view">;

  newValidatorSetLength: TypedContractMethod<[], [bigint], "view">;

  DECIMALS: TypedContractMethod<[], [bigint], "view">;

  "withdraw(uint256)": TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  "withdraw(address,uint256)": TypedContractMethod<
    [_validator: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  isInitialized: TypedContractMethod<[], [boolean], "view">;

  stake: TypedContractMethod<[], [void], "payable">;

  currentValidatorsLength: TypedContractMethod<[], [bigint], "view">;

  setValidatorFee: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getMinStake: TypedContractMethod<[], [bigint], "view">;

  currentValidatorsAtPosition: TypedContractMethod<
    [_p: BigNumberish],
    [string],
    "view"
  >;

  delegate: TypedContractMethod<[_validator: AddressLike], [void], "payable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  newValidatorSet: TypedContractMethod<[], [string[]], "view">;

  jailedValidators: TypedContractMethod<[], [string[]], "view">;

  getDelegatorsForRewardDistribution: TypedContractMethod<
    [_validator: AddressLike, _rewardAmount: BigNumberish],
    [[string[], bigint[]]],
    "view"
  >;

  STRIKE_RESET: TypedContractMethod<[], [bigint], "view">;

  maintenance: TypedContractMethod<[], [void], "nonpayable">;

  unJail: TypedContractMethod<[], [void], "nonpayable">;

  MAX_VALIDATORS: TypedContractMethod<[], [bigint], "view">;

  VALIDATOR_PRODUCTIVITY_BP: TypedContractMethod<[], [bigint], "view">;

  finalizeChange: TypedContractMethod<[], [void], "nonpayable">;

  getMaxValidators: TypedContractMethod<[], [bigint], "view">;

  getStrikes: TypedContractMethod<[_validator: AddressLike], [bigint], "view">;

  blockCounter: TypedContractMethod<
    [_validator: AddressLike],
    [bigint],
    "view"
  >;

  CYCLE_DURATION_BLOCKS: TypedContractMethod<[], [bigint], "view">;

  cycle: TypedContractMethod<[_validator: AddressLike], [void], "nonpayable">;

  MAX_STRIKE_COUNT: TypedContractMethod<[], [bigint], "view">;

  requiredSignatures: TypedContractMethod<[], [bigint], "view">;

  delegators: TypedContractMethod<
    [_validator: AddressLike],
    [string[]],
    "view"
  >;

  isFinalized: TypedContractMethod<[], [boolean], "view">;

  jailedValidatorsAtPosition: TypedContractMethod<
    [_p: BigNumberish],
    [string],
    "view"
  >;

  DEFAULT_VALIDATOR_FEE: TypedContractMethod<[], [bigint], "view">;

  getCurrentCycleStartBlock: TypedContractMethod<[], [bigint], "view">;

  emitInitiateChange: TypedContractMethod<[], [void], "nonpayable">;

  totalStakeAmount: TypedContractMethod<[], [bigint], "view">;

  validatorFee: TypedContractMethod<
    [_validator: AddressLike],
    [bigint],
    "view"
  >;

  isDelegator: TypedContractMethod<
    [_validator: AddressLike, _address: AddressLike],
    [boolean],
    "view"
  >;

  currentValidators: TypedContractMethod<[], [string[]], "view">;

  getCycleDurationBlocks: TypedContractMethod<[], [bigint], "view">;

  pendingValidators: TypedContractMethod<[], [string[]], "view">;

  getCurrentCycleEndBlock: TypedContractMethod<[], [bigint], "view">;

  getValidators: TypedContractMethod<[], [string[]], "view">;

  stakeAmount: TypedContractMethod<[_address: AddressLike], [bigint], "view">;

  initialize: TypedContractMethod<
    [_initialValidator: AddressLike],
    [void],
    "nonpayable"
  >;

  MAX_STAKE: TypedContractMethod<[], [bigint], "view">;

  MIN_STAKE: TypedContractMethod<[], [bigint], "view">;

  getStrikeReset: TypedContractMethod<
    [_validator: AddressLike],
    [bigint],
    "view"
  >;

  delegatorsLength: TypedContractMethod<
    [_validator: AddressLike],
    [bigint],
    "view"
  >;

  delegatorsAtPosition: TypedContractMethod<
    [_validator: AddressLike, _p: BigNumberish],
    [string],
    "view"
  >;

  getProxyStorage: TypedContractMethod<[], [string], "view">;

  getReleaseBlock: TypedContractMethod<
    [_validator: AddressLike],
    [bigint],
    "view"
  >;

  shouldEmitInitiateChange: TypedContractMethod<[], [boolean], "view">;

  isValidator: TypedContractMethod<[_address: AddressLike], [boolean], "view">;

  isPendingValidator: TypedContractMethod<
    [_address: AddressLike],
    [boolean],
    "view"
  >;

  getMaxStake: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "jailedValidatorsLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pendingValidatorsAtPosition"
  ): TypedContractMethod<[_p: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getSnapshotAddresses"
  ): TypedContractMethod<[_snapshotId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "setProxyStorage"
  ): TypedContractMethod<[_newAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getMinValidatorFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isJailed"
  ): TypedContractMethod<[_address: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "setPaused"
  ): TypedContractMethod<[_paused: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "delegatedAmount"
  ): TypedContractMethod<
    [_address: AddressLike, _validator: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "pendingValidatorsLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "newValidatorSetLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DECIMALS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdraw(uint256)"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw(address,uint256)"
  ): TypedContractMethod<
    [_validator: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isInitialized"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "stake"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "currentValidatorsLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setValidatorFee"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getMinStake"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "currentValidatorsAtPosition"
  ): TypedContractMethod<[_p: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "delegate"
  ): TypedContractMethod<[_validator: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "newValidatorSet"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "jailedValidators"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getDelegatorsForRewardDistribution"
  ): TypedContractMethod<
    [_validator: AddressLike, _rewardAmount: BigNumberish],
    [[string[], bigint[]]],
    "view"
  >;
  getFunction(
    nameOrSignature: "STRIKE_RESET"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maintenance"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unJail"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "MAX_VALIDATORS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VALIDATOR_PRODUCTIVITY_BP"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "finalizeChange"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getMaxValidators"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getStrikes"
  ): TypedContractMethod<[_validator: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "blockCounter"
  ): TypedContractMethod<[_validator: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "CYCLE_DURATION_BLOCKS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "cycle"
  ): TypedContractMethod<[_validator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "MAX_STRIKE_COUNT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "requiredSignatures"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "delegators"
  ): TypedContractMethod<[_validator: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "isFinalized"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "jailedValidatorsAtPosition"
  ): TypedContractMethod<[_p: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_VALIDATOR_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentCycleStartBlock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "emitInitiateChange"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalStakeAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "validatorFee"
  ): TypedContractMethod<[_validator: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "isDelegator"
  ): TypedContractMethod<
    [_validator: AddressLike, _address: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "currentValidators"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getCycleDurationBlocks"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pendingValidators"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getCurrentCycleEndBlock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getValidators"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "stakeAmount"
  ): TypedContractMethod<[_address: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_initialValidator: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "MAX_STAKE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_STAKE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getStrikeReset"
  ): TypedContractMethod<[_validator: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "delegatorsLength"
  ): TypedContractMethod<[_validator: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "delegatorsAtPosition"
  ): TypedContractMethod<
    [_validator: AddressLike, _p: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProxyStorage"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getReleaseBlock"
  ): TypedContractMethod<[_validator: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "shouldEmitInitiateChange"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isValidator"
  ): TypedContractMethod<[_address: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isPendingValidator"
  ): TypedContractMethod<[_address: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getMaxStake"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "ChangeFinalized"
  ): TypedContractEvent<
    ChangeFinalizedEvent.InputTuple,
    ChangeFinalizedEvent.OutputTuple,
    ChangeFinalizedEvent.OutputObject
  >;
  getEvent(
    key: "ShouldEmitInitiateChange"
  ): TypedContractEvent<
    ShouldEmitInitiateChangeEvent.InputTuple,
    ShouldEmitInitiateChangeEvent.OutputTuple,
    ShouldEmitInitiateChangeEvent.OutputObject
  >;
  getEvent(
    key: "InitiateChange"
  ): TypedContractEvent<
    InitiateChangeEvent.InputTuple,
    InitiateChangeEvent.OutputTuple,
    InitiateChangeEvent.OutputObject
  >;

  filters: {
    "ChangeFinalized(address[])": TypedContractEvent<
      ChangeFinalizedEvent.InputTuple,
      ChangeFinalizedEvent.OutputTuple,
      ChangeFinalizedEvent.OutputObject
    >;
    ChangeFinalized: TypedContractEvent<
      ChangeFinalizedEvent.InputTuple,
      ChangeFinalizedEvent.OutputTuple,
      ChangeFinalizedEvent.OutputObject
    >;

    "ShouldEmitInitiateChange()": TypedContractEvent<
      ShouldEmitInitiateChangeEvent.InputTuple,
      ShouldEmitInitiateChangeEvent.OutputTuple,
      ShouldEmitInitiateChangeEvent.OutputObject
    >;
    ShouldEmitInitiateChange: TypedContractEvent<
      ShouldEmitInitiateChangeEvent.InputTuple,
      ShouldEmitInitiateChangeEvent.OutputTuple,
      ShouldEmitInitiateChangeEvent.OutputObject
    >;

    "InitiateChange(bytes32,address[])": TypedContractEvent<
      InitiateChangeEvent.InputTuple,
      InitiateChangeEvent.OutputTuple,
      InitiateChangeEvent.OutputObject
    >;
    InitiateChange: TypedContractEvent<
      InitiateChangeEvent.InputTuple,
      InitiateChangeEvent.OutputTuple,
      InitiateChangeEvent.OutputObject
    >;
  };
}
